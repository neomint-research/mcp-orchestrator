# MCP Multi-Agent Orchestrator - Windows Docker Desktop Configuration
# This Docker Compose configuration is specifically for Windows Docker Desktop
# Uses named pipes instead of Unix sockets for Docker communication
#
# Usage:
#   docker-compose -f docker-compose.windows.yml up
#
# Or use the provided script:
#   .\scripts\deploy\start-rootless.ps1

version: '3.8'

services:
  # MCP Multi-Agent Orchestrator Core (Windows Docker Desktop)
  orchestrator:
    build:
      context: ..
      dockerfile: environments/core/Dockerfile
      args:
        USER_ID: ${DOCKER_USER_ID:-1001}
        GROUP_ID: ${DOCKER_USER_ID:-1001}
    container_name: mcp-orchestrator-core
    ports:
      - "3000:3000"
    volumes:
      # Windows Docker Desktop uses named pipes, no socket mounting needed
      # Mount registry for persistent storage
      - registry-data:/app/registry
      # Mount logs directory
      - temp-data:/app/temp
    environment:
      - NODE_ENV=production
      - ORCHESTRATOR_PORT=3000
      - ORCHESTRATOR_HOST=0.0.0.0
      - LOG_LEVEL=INFO
      - DISCOVERY_INTERVAL=30000
      - MCP_TIMEOUT=45000
      # Windows Docker Desktop configuration
      - DOCKER_MODE=rootless
      - DOCKER_ROOTLESS_SOCKET_PATH=//./pipe/docker_engine
      - UID=${DOCKER_USER_ID:-1001}
      - DISCOVERY_RETRY_ATTEMPTS=10
      - DISCOVERY_RETRY_DELAY=3000
      - ROOTLESS_MODE=true
    env_file:
      - env/.env.core
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    labels:
      - "mcp.orchestrator=true"
      - "mcp.orchestrator.name=core-orchestrator"
      - "mcp.orchestrator.version=1.0.0"
      - "mcp.orchestrator.mode=rootless"
      - "mcp.security.rootless=true"
      - "mcp.platform=windows"

  # MCP Agent Modules
  file-agent:
    build:
      context: ..
      dockerfile: environments/modules/file-agent/Dockerfile
    container_name: mcp-file-agent
    ports:
      - "3001:3001"
    volumes:
      - temp-data:/app/workspace
    environment:
      - NODE_ENV=production
      - FILE_AGENT_PORT=3001
      - FILE_AGENT_HOST=0.0.0.0
      - FILE_AGENT_WORKDIR=/app/workspace
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    labels:
      - "mcp.server=true"
      - "mcp.server.name=file-agent"
      - "mcp.server.port=3001"
      - "mcp.server.protocol=http"

  memory-agent:
    build:
      context: ..
      dockerfile: environments/modules/memory-agent/Dockerfile
    container_name: mcp-memory-agent
    ports:
      - "3002:3002"
    volumes:
      - registry-data:/app/data
    environment:
      - NODE_ENV=production
      - MEMORY_AGENT_PORT=3002
      - MEMORY_AGENT_HOST=0.0.0.0
      - MEMORY_AGENT_DATA=/app/data
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    labels:
      - "mcp.server=true"
      - "mcp.server.name=memory-agent"
      - "mcp.server.port=3002"
      - "mcp.server.protocol=http"

  intent-agent:
    build:
      context: ..
      dockerfile: environments/modules/intent-agent/Dockerfile
    container_name: mcp-intent-agent
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - INTENT_AGENT_PORT=3003
      - INTENT_AGENT_HOST=0.0.0.0
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    labels:
      - "mcp.server=true"
      - "mcp.server.name=intent-agent"
      - "mcp.server.port=3003"
      - "mcp.server.protocol=http"

  task-agent:
    build:
      context: ..
      dockerfile: environments/modules/task-agent/Dockerfile
    container_name: mcp-task-agent
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=production
      - TASK_AGENT_PORT=3004
      - TASK_AGENT_HOST=0.0.0.0
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    labels:
      - "mcp.server=true"
      - "mcp.server.name=task-agent"
      - "mcp.server.port=3004"
      - "mcp.server.protocol=http"

networks:
  mcp-network:
    driver: bridge
    name: mcp-network
    labels:
      - "mcp.network=true"
      - "mcp.security.rootless=true"
      - "mcp.platform=windows"

volumes:
  registry-data:
    driver: local
    labels:
      - "mcp.volume=registry"
      - "mcp.security.rootless=true"
      - "mcp.platform=windows"
  
  temp-data:
    driver: local
    labels:
      - "mcp.volume=temp"
      - "mcp.security.rootless=true"
      - "mcp.platform=windows"
